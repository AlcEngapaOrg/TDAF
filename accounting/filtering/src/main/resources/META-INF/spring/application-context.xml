<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		                   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <bean class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
        <property name="location" value="file:${FILTERING_HOME}/conf/filtering.properties"/>
    </bean>

    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <route>
            <from uri="file://{{log.dir}}?sendEmptyMessageWhenIdle=true&amp;noop=true&amp;idempotent=true&amp;idempotentKey=${file:name}-${file:size}&amp;initialDelay=0&amp;delay=1"/>
            <choice>
                <when>
                    <simple>${body} != null</simple>
                    <to uri="direct:logFile"/>
                </when>
                <otherwise>
                    <setBody>
                        <constant>1</constant>
                    </setBody>
                    <bean ref="semaphore" method="release"/>
                </otherwise>
            </choice>
        </route>
        
        <route>
            <from uri="direct:logFile"/>
            <setHeader headerName="init">
                <javaScript>java.lang.System.currentTimeMillis()</javaScript>
            </setHeader>
<!--             <wireTap uri="log:STD_OUT?level=INFO&amp;showBody=true&amp;showHeaders=true&amp;multiline=true&amp;showExchangePattern=false&amp;showBodyType=false"/> -->
            <log loggingLevel="INFO" logName="STD_OUT" message="Processing"/>
            <setHeader headerName="log-screen">
                <javaScript>print("Processing file " + exchange.getIn().getHeader("CamelFileAbsolutePath") +"\n")</javaScript>
            </setHeader>
            <split streaming="true" parallelProcessing="true">
                <method ref="logParser" method="iterator"/>
                <to uri="direct:event"/>
            </split>
            <setHeader headerName="end">
                <javaScript>java.lang.System.currentTimeMillis()</javaScript>
            </setHeader>
            <log loggingLevel="INFO" logName="STD_OUT" message="File ms"/>
        </route>
        
        <route>
            <from uri="direct:event"/>
            <setHeader headerName="matcher">
                <method ref="ipdrEntryMatcher" method="matches"/>
            </setHeader>
            <choice>
                <when>
                    <simple>${in.header.matcher} != null</simple>
                    <to uri="direct:processEntry"/>
                </when>
            </choice>
        </route>
        
        <route>
            <from uri="direct:processEntry"/>
            <process ref="matches2Headers"/>
            <process ref="logData2Headers"/>
        </route>
    </camelContext>
    
    <bean id="logParser" class="es.tid.cloud.tdaf.accounting.filtering.LogParser">
        <property name="pattern" value="${log.pattern}"/>
        <property name="dateFormat" value="${log.dateFormat}"/>
        <property name="customLevels" value="${log.customLevels}"/>
    </bean>
    <bean id="ipdrIdentifier" class="es.tid.cloud.tdaf.accounting.filtering.IPDREntryIdentifier">
        <property name="file" value="file:${FILTERING_HOME}/conf/ipdrEntries.csv"/>
    </bean>
    <bean id="ipdrEntryMatcher" class="es.tid.cloud.tdaf.accounting.filtering.IPDREntryMatcher">
        <constructor-arg ref="ipdrIdentifier"/>
    </bean>
    <bean id="matches2Headers" class="es.tid.cloud.tdaf.accounting.filtering.processor.Matches2HeadersProcessor"/>
    <bean id="logData2Headers" class="es.tid.cloud.tdaf.accounting.filtering.processor.LogDataToHeadersProcessor"/>
    <bean id="semaphore" class="java.util.concurrent.Semaphore">
        <constructor-arg value="0"/>
    </bean>
</beans>
