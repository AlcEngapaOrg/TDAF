<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <camelContext xmlns="http://camel.apache.org/schema/spring" id="filteringContext">
        <propertyPlaceholder id="filteringProps" location="ref:props"/>
        <route>
            <from uri="file://{{log.dir}}?sendEmptyMessageWhenIdle=true&amp;noop=true&amp;idempotent=true&amp;idempotentKey=${file:name}-${file:size}&amp;initialDelay=0&amp;delay=1"/>
            <choice>
                <when>
                    <simple>${body} != null</simple>
                    <to uri="direct:logFile"/>
                    <camel:when>
                        <simple>${property.CamelBatchComplete}</simple>
                        <log loggingLevel="INFO" logName="STD_OUT" message="Processsed ${property.CamelBatchSize} files."/>
                    </camel:when>
                </when>
                <otherwise>
                    <setBody>
                        <constant>1</constant>
                    </setBody>
                    <bean ref="semaphore" method="release"/>
                </otherwise>
            </choice>
        </route>

        <route>
            <from uri="direct:logFile"/>
            <onCompletion>
                <setHeader headerName="fileTime">
                    <javaScript>java.lang.System.currentTimeMillis() - exchange.getIn().getHeader("fileInit")</javaScript>
                </setHeader>
                <log loggingLevel="INFO" logName="STD_OUT" message="File ${header.CamelFileAbsolutePath} processed in ${header.fileTime}ms."/>
            </onCompletion>
            <setHeader headerName="fileInit">
                <javaScript>java.lang.System.currentTimeMillis()</javaScript>
            </setHeader>

            <log loggingLevel="INFO" logName="STD_OUT" message="Precessing file ${header.CamelFileAbsolutePath}."/>
            <split streaming="true" parallelProcessing="true">
                <method ref="logParser" method="iterator"/>
                <to uri="direct:event"/>
            </split>
        </route>

        <route>
            <from uri="direct:event"/>
            <setHeader headerName="matcher">
                <method ref="ipdrEntryMatcher" method="matches"/>
            </setHeader>
            <choice>
                <when>
                    <simple>${in.header.matcher} != null</simple>
                    <to uri="direct:processEntry"/>
                </when>
            </choice>
        </route>

        <route>
            <from uri="direct:processEntry"/>
            <multicast strategyRef="mapAggregator" parallelProcessing="false">
                <!--  log data to body first and then the add (overriding) with the matches in the message -->
                <setBody>
                    <method ref="logData2Map" method="process"/>
                </setBody>
                <setBody>
                    <method ref="matches2Map" method="process"/>
                </setBody>
            </multicast>
            <to uri="vm:persist-events"/>
        </route>
    </camelContext>

</beans>
